<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        .videoGrid {
            width: 100%;
            height: 50%;
        }

        video {
            border: 1px solid black;
            width: 40%;
            height: 100%;
            object-fit: cover;
        }
    </style>
    <title>Home</title>
</head>

<body>
    <div class="videoGrid">
        <!-- <div class="myVideo"></div> -->
        <!-- <div class="otherVideo"></div> -->
    </div>

    <script src="/socket.io/socket.io.js"></script>


    <script src="https://cdnjs.cloudflare.com/ajax/libs/peerjs/1.3.2/peerjs.min.js"
        integrity="sha512-4wTQ8feow93K3qVGVXUGLULDB9eAULiG+xdbaQH8tYZlXxYv9ij+evblXD0EOqmGWT8NBTd1vQGsURvrQzmKeg=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>


    <script>
        const socket = io("/");
        const roomID = "<%=roomId%>"
        console.log("Hhhhhhhh");

        socket.on("user_connected", (userId) => {
            console.log(userId);
        });


        const peer = new Peer()
        const videoGrid = document.querySelector(".videoGrid");
        const myVideo = document.createElement("video");
        myVideo.muted = true;
        myVideo.classList.add("myStream")



        function addVideoStream(video, stream) {
            video.srcObject = stream;
            video.addEventListener("loadedmetadata", () => {
                video.play();
            });
            videoGrid.appendChild(video);
        }


        function connectToOtherUser(userId, stream) {
            const call = peer.call(userId, stream);
            const video = document.createElement("video");
            video.classList.add("otherStream")
            call.on("stream", (userVideoStream) => {
                addVideoStream(video, userVideoStream);
            });
            call.on("close", () => {
                video.remove();
            });
        };


        navigator.mediaDevices.getUserMedia({
            video: true,
            audio: true
        }).then((stream) => {
            addVideoStream(myVideo, stream);

            peer.on("call", (call) => {
                call.answer(stream);
                const video = document.createElement("video");
                call.on("stream", (userVideoStream) => {
                    addVideoStream(video, userVideoStream);
                })
            });

            socket.on("user_connected", (userId) => {
                // calling other client and sending stream----
                connectToOtherUser(userId, stream);
            });
        }).catch((err) => {
            console.log(err);
        });



        peer.on("open", (id) => {
            socket.emit("join_room", roomID, id);
        });


    </script>

</body>

</html>